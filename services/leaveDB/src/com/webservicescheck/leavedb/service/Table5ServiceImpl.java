/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.webservicescheck.leavedb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.webservicescheck.leavedb.Table5;


/**
 * ServiceImpl object for domain model class Table5.
 *
 * @see Table5
 */
@Service("leaveDB.Table5Service")
@Validated
public class Table5ServiceImpl implements Table5Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table5ServiceImpl.class);


    @Autowired
    @Qualifier("leaveDB.Table5Dao")
    private WMGenericDao<Table5, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table5, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "leaveDBTransactionManager")
    @Override
    public Table5 create(Table5 table5) {
        LOGGER.debug("Creating a new Table5 with information: {}", table5);

        Table5 table5Created = this.wmGenericDao.create(table5);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(table5Created);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public Table5 getById(Integer table5Id) {
        LOGGER.debug("Finding Table5 by id: {}", table5Id);
        return this.wmGenericDao.findById(table5Id);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public Table5 findById(Integer table5Id) {
        LOGGER.debug("Finding Table5 by id: {}", table5Id);
        try {
            return this.wmGenericDao.findById(table5Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Table5 found with id: {}", table5Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public List<Table5> findByMultipleIds(List<Integer> table5Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Table5s by ids: {}", table5Ids);

        return this.wmGenericDao.findByMultipleIds(table5Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "leaveDBTransactionManager")
    @Override
    public Table5 update(Table5 table5) {
        LOGGER.debug("Updating Table5 with information: {}", table5);

        this.wmGenericDao.update(table5);
        this.wmGenericDao.refresh(table5);

        return table5;
    }

    @Transactional(value = "leaveDBTransactionManager")
    @Override
    public Table5 delete(Integer table5Id) {
        LOGGER.debug("Deleting Table5 with id: {}", table5Id);
        Table5 deleted = this.wmGenericDao.findById(table5Id);
        if (deleted == null) {
            LOGGER.debug("No Table5 found with id: {}", table5Id);
            throw new EntityNotFoundException(String.valueOf(table5Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "leaveDBTransactionManager")
    @Override
    public void delete(Table5 table5) {
        LOGGER.debug("Deleting Table5 with {}", table5);
        this.wmGenericDao.delete(table5);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public Page<Table5> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table5s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public Page<Table5> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table5s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service leaveDB for table Table5 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service leaveDB for table Table5 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}