/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.webservicescheck.leavedb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.webservicescheck.leavedb.EmpDetails;
import com.webservicescheck.leavedb.EmpLeaves;


/**
 * ServiceImpl object for domain model class EmpDetails.
 *
 * @see EmpDetails
 */
@Service("leaveDB.EmpDetailsService")
@Validated
public class EmpDetailsServiceImpl implements EmpDetailsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmpDetailsServiceImpl.class);


    @Autowired
    @Qualifier("leaveDB.EmpDetailsDao")
    private WMGenericDao<EmpDetails, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EmpDetails, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "leaveDBTransactionManager")
    @Override
    public EmpDetails create(EmpDetails empDetails) {
        LOGGER.debug("Creating a new EmpDetails with information: {}", empDetails);

        EmpLeaves empLeaves = empDetails.getEmpLeaves();
        if(empLeaves != null && Hibernate.isInitialized(empLeaves)) {
            empLeaves.setEmpDetails(empDetails);
        }

        EmpDetails empDetailsCreated = this.wmGenericDao.create(empDetails);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(empDetailsCreated);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public EmpDetails getById(Integer empdetailsId) {
        LOGGER.debug("Finding EmpDetails by id: {}", empdetailsId);
        return this.wmGenericDao.findById(empdetailsId);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public EmpDetails findById(Integer empdetailsId) {
        LOGGER.debug("Finding EmpDetails by id: {}", empdetailsId);
        try {
            return this.wmGenericDao.findById(empdetailsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No EmpDetails found with id: {}", empdetailsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public List<EmpDetails> findByMultipleIds(List<Integer> empdetailsIds, boolean orderedReturn) {
        LOGGER.debug("Finding EmpDetails by ids: {}", empdetailsIds);

        return this.wmGenericDao.findByMultipleIds(empdetailsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "leaveDBTransactionManager")
    @Override
    public EmpDetails update(EmpDetails empDetails) {
        LOGGER.debug("Updating EmpDetails with information: {}", empDetails);

        EmpLeaves empLeaves = empDetails.getEmpLeaves();
        if(empLeaves != null && Hibernate.isInitialized(empLeaves)) {
            empLeaves.setEmpDetails(empDetails);
        }

        this.wmGenericDao.update(empDetails);
        this.wmGenericDao.refresh(empDetails);

        return empDetails;
    }

    @Transactional(value = "leaveDBTransactionManager")
    @Override
    public EmpDetails delete(Integer empdetailsId) {
        LOGGER.debug("Deleting EmpDetails with id: {}", empdetailsId);
        EmpDetails deleted = this.wmGenericDao.findById(empdetailsId);
        if (deleted == null) {
            LOGGER.debug("No EmpDetails found with id: {}", empdetailsId);
            throw new EntityNotFoundException(String.valueOf(empdetailsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "leaveDBTransactionManager")
    @Override
    public void delete(EmpDetails empDetails) {
        LOGGER.debug("Deleting EmpDetails with {}", empDetails);
        this.wmGenericDao.delete(empDetails);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public Page<EmpDetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EmpDetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public Page<EmpDetails> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EmpDetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service leaveDB for table EmpDetails to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service leaveDB for table EmpDetails to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}