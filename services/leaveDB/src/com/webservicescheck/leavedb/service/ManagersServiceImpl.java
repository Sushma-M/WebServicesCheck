/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.webservicescheck.leavedb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.data.util.DaoUtils;
import com.wavemaker.runtime.file.model.Downloadable;

import com.webservicescheck.leavedb.EmpDetails;
import com.webservicescheck.leavedb.Managers;


/**
 * ServiceImpl object for domain model class Managers.
 *
 * @see Managers
 */
@Service("leaveDB.ManagersService")
@Validated
public class ManagersServiceImpl implements ManagersService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ManagersServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("leaveDB.EmpDetailsService")
    private EmpDetailsService empDetailsService;

    @Autowired
    @Qualifier("leaveDB.ManagersDao")
    private WMGenericDao<Managers, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Managers, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "leaveDBTransactionManager")
    @Override
    public Managers create(Managers managers) {
        LOGGER.debug("Creating a new Managers with information: {}", managers);

        Managers managersCreated = this.wmGenericDao.create(managers);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(managersCreated);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public Managers getById(Integer managersId) {
        LOGGER.debug("Finding Managers by id: {}", managersId);
        return this.wmGenericDao.findById(managersId);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public Managers findById(Integer managersId) {
        LOGGER.debug("Finding Managers by id: {}", managersId);
        try {
            return this.wmGenericDao.findById(managersId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Managers found with id: {}", managersId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public List<Managers> findByMultipleIds(List<Integer> managersIds, boolean orderedReturn) {
        LOGGER.debug("Finding Managers by ids: {}", managersIds);

        return this.wmGenericDao.findByMultipleIds(managersIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "leaveDBTransactionManager")
    @Override
    public Managers update(Managers managers) {
        LOGGER.debug("Updating Managers with information: {}", managers);

        List<EmpDetails> empDetailses = managers.getEmpDetailses();
        if(empDetailses != null && Hibernate.isInitialized(empDetailses)) {
            empDetailses.forEach(_empDetails -> _empDetails.setManagers(managers));
        }

        this.wmGenericDao.update(managers);
        this.wmGenericDao.refresh(managers);

        // Deleting children which are not present in the list.
        if(empDetailses != null && Hibernate.isInitialized(empDetailses) && !empDetailses.isEmpty()) {
            List<EmpDetails> _remainingChildren = wmGenericDao.execute(
                session -> DaoUtils.findAllRemainingChildren(session, EmpDetails.class,
                        new DaoUtils.ChildrenFilter<>("managers", managers, empDetailses)));
            LOGGER.debug("Found {} detached children, deleting", _remainingChildren.size());
            _remainingChildren.forEach(_empDetails -> empDetailsService.delete(_empDetails));
            managers.setEmpDetailses(empDetailses);
        }

        return managers;
    }

    @Transactional(value = "leaveDBTransactionManager")
    @Override
    public Managers delete(Integer managersId) {
        LOGGER.debug("Deleting Managers with id: {}", managersId);
        Managers deleted = this.wmGenericDao.findById(managersId);
        if (deleted == null) {
            LOGGER.debug("No Managers found with id: {}", managersId);
            throw new EntityNotFoundException(String.valueOf(managersId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "leaveDBTransactionManager")
    @Override
    public void delete(Managers managers) {
        LOGGER.debug("Deleting Managers with {}", managers);
        this.wmGenericDao.delete(managers);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public Page<Managers> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Managers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public Page<Managers> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Managers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service leaveDB for table Managers to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service leaveDB for table Managers to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public Page<EmpDetails> findAssociatedEmpDetailses(Integer managerId, Pageable pageable) {
        LOGGER.debug("Fetching all associated empDetailses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("managers.managerId = '" + managerId + "'");

        return empDetailsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service EmpDetailsService instance
     */
    protected void setEmpDetailsService(EmpDetailsService service) {
        this.empDetailsService = service;
    }

}