/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.webservicescheck.leavedb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.webservicescheck.leavedb.LeaveApp;


/**
 * ServiceImpl object for domain model class LeaveApp.
 *
 * @see LeaveApp
 */
@Service("leaveDB.LeaveAppService")
@Validated
public class LeaveAppServiceImpl implements LeaveAppService {

    private static final Logger LOGGER = LoggerFactory.getLogger(LeaveAppServiceImpl.class);


    @Autowired
    @Qualifier("leaveDB.LeaveAppDao")
    private WMGenericDao<LeaveApp, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<LeaveApp, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "leaveDBTransactionManager")
    @Override
    public LeaveApp create(LeaveApp leaveApp) {
        LOGGER.debug("Creating a new LeaveApp with information: {}", leaveApp);

        LeaveApp leaveAppCreated = this.wmGenericDao.create(leaveApp);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(leaveAppCreated);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public LeaveApp getById(Integer leaveappId) {
        LOGGER.debug("Finding LeaveApp by id: {}", leaveappId);
        return this.wmGenericDao.findById(leaveappId);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public LeaveApp findById(Integer leaveappId) {
        LOGGER.debug("Finding LeaveApp by id: {}", leaveappId);
        try {
            return this.wmGenericDao.findById(leaveappId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No LeaveApp found with id: {}", leaveappId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public List<LeaveApp> findByMultipleIds(List<Integer> leaveappIds, boolean orderedReturn) {
        LOGGER.debug("Finding LeaveApps by ids: {}", leaveappIds);

        return this.wmGenericDao.findByMultipleIds(leaveappIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "leaveDBTransactionManager")
    @Override
    public LeaveApp update(LeaveApp leaveApp) {
        LOGGER.debug("Updating LeaveApp with information: {}", leaveApp);

        this.wmGenericDao.update(leaveApp);
        this.wmGenericDao.refresh(leaveApp);

        return leaveApp;
    }

    @Transactional(value = "leaveDBTransactionManager")
    @Override
    public LeaveApp delete(Integer leaveappId) {
        LOGGER.debug("Deleting LeaveApp with id: {}", leaveappId);
        LeaveApp deleted = this.wmGenericDao.findById(leaveappId);
        if (deleted == null) {
            LOGGER.debug("No LeaveApp found with id: {}", leaveappId);
            throw new EntityNotFoundException(String.valueOf(leaveappId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "leaveDBTransactionManager")
    @Override
    public void delete(LeaveApp leaveApp) {
        LOGGER.debug("Deleting LeaveApp with {}", leaveApp);
        this.wmGenericDao.delete(leaveApp);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public Page<LeaveApp> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all LeaveApps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public Page<LeaveApp> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all LeaveApps");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service leaveDB for table LeaveApp to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service leaveDB for table LeaveApp to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}