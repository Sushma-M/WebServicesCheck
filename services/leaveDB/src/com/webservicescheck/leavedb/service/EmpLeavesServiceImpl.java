/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.webservicescheck.leavedb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.webservicescheck.leavedb.EmpLeaves;


/**
 * ServiceImpl object for domain model class EmpLeaves.
 *
 * @see EmpLeaves
 */
@Service("leaveDB.EmpLeavesService")
@Validated
public class EmpLeavesServiceImpl implements EmpLeavesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmpLeavesServiceImpl.class);


    @Autowired
    @Qualifier("leaveDB.EmpLeavesDao")
    private WMGenericDao<EmpLeaves, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EmpLeaves, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "leaveDBTransactionManager")
    @Override
    public EmpLeaves create(EmpLeaves empLeaves) {
        LOGGER.debug("Creating a new EmpLeaves with information: {}", empLeaves);

        EmpLeaves empLeavesCreated = this.wmGenericDao.create(empLeaves);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(empLeavesCreated);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public EmpLeaves getById(Integer empleavesId) {
        LOGGER.debug("Finding EmpLeaves by id: {}", empleavesId);
        return this.wmGenericDao.findById(empleavesId);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public EmpLeaves findById(Integer empleavesId) {
        LOGGER.debug("Finding EmpLeaves by id: {}", empleavesId);
        try {
            return this.wmGenericDao.findById(empleavesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No EmpLeaves found with id: {}", empleavesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public List<EmpLeaves> findByMultipleIds(List<Integer> empleavesIds, boolean orderedReturn) {
        LOGGER.debug("Finding EmpLeaves by ids: {}", empleavesIds);

        return this.wmGenericDao.findByMultipleIds(empleavesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "leaveDBTransactionManager")
    @Override
    public EmpLeaves update(EmpLeaves empLeaves) {
        LOGGER.debug("Updating EmpLeaves with information: {}", empLeaves);

        this.wmGenericDao.update(empLeaves);
        this.wmGenericDao.refresh(empLeaves);

        return empLeaves;
    }

    @Transactional(value = "leaveDBTransactionManager")
    @Override
    public EmpLeaves delete(Integer empleavesId) {
        LOGGER.debug("Deleting EmpLeaves with id: {}", empleavesId);
        EmpLeaves deleted = this.wmGenericDao.findById(empleavesId);
        if (deleted == null) {
            LOGGER.debug("No EmpLeaves found with id: {}", empleavesId);
            throw new EntityNotFoundException(String.valueOf(empleavesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "leaveDBTransactionManager")
    @Override
    public void delete(EmpLeaves empLeaves) {
        LOGGER.debug("Deleting EmpLeaves with {}", empLeaves);
        this.wmGenericDao.delete(empLeaves);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public Page<EmpLeaves> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EmpLeaves");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public Page<EmpLeaves> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EmpLeaves");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service leaveDB for table EmpLeaves to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service leaveDB for table EmpLeaves to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "leaveDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}