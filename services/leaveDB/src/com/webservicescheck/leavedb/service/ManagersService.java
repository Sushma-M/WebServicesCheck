/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.webservicescheck.leavedb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.webservicescheck.leavedb.EmpDetails;
import com.webservicescheck.leavedb.Managers;

/**
 * Service object for domain model class {@link Managers}.
 */
public interface ManagersService {

    /**
     * Creates a new Managers. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Managers if any.
     *
     * @param managers Details of the Managers to be created; value cannot be null.
     * @return The newly created Managers.
     */
    Managers create(@Valid Managers managers);


	/**
     * Returns Managers by given id if exists.
     *
     * @param managersId The id of the Managers to get; value cannot be null.
     * @return Managers associated with the given managersId.
	 * @throws EntityNotFoundException If no Managers is found.
     */
    Managers getById(Integer managersId);

    /**
     * Find and return the Managers by given id if exists, returns null otherwise.
     *
     * @param managersId The id of the Managers to get; value cannot be null.
     * @return Managers associated with the given managersId.
     */
    Managers findById(Integer managersId);

	/**
     * Find and return the list of Managers by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param managersIds The id's of the Managers to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Managers associated with the given managersIds.
     */
    List<Managers> findByMultipleIds(List<Integer> managersIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Managers. It replaces all fields of the existing Managers with the given managers.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Managers if any.
     *
     * @param managers The details of the Managers to be updated; value cannot be null.
     * @return The updated Managers.
     * @throws EntityNotFoundException if no Managers is found with given input.
     */
    Managers update(@Valid Managers managers);

    /**
     * Deletes an existing Managers with the given id.
     *
     * @param managersId The id of the Managers to be deleted; value cannot be null.
     * @return The deleted Managers.
     * @throws EntityNotFoundException if no Managers found with the given id.
     */
    Managers delete(Integer managersId);

    /**
     * Deletes an existing Managers with the given object.
     *
     * @param managers The instance of the Managers to be deleted; value cannot be null.
     */
    void delete(Managers managers);

    /**
     * Find all Managers matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Managers.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Managers> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Managers matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Managers.
     *
     * @see Pageable
     * @see Page
     */
    Page<Managers> findAll(String query, Pageable pageable);

    /**
     * Exports all Managers matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Managers matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Managers in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Managers.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated empDetailses for given Managers id.
     *
     * @param managerId value of managerId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated EmpDetails instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<EmpDetails> findAssociatedEmpDetailses(Integer managerId, Pageable pageable);

}